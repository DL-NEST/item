{"version":3,"file":"main.cjs","sources":["../../src/electron/windows/taskManager.ts","../../src/electron/windows/mainWindow.ts","../../src/electron/windows/translation.ts","../../src/electron/appSetup/protocol.ts","../../src/electron/appSetup/tray.ts","../../src/electron/appSetup/notification.ts","../../src/electron/appSetup/globalIpc.ts","../../src/electron/appSetup/index.ts","../../src/electron/processManage/index.ts","../../src/electron/main.ts"],"sourcesContent":["import {TaskManager} from \"@/processManage\";\r\nimport {join} from \"path\";\r\nimport {ipcMain,BrowserWindow} from \"electron\";\r\n\r\n\r\nfunction createTaskManager(taskManager: TaskManager) {\r\n    taskManager.createElectronProcess(\"taskManager\", \"/taskManager\",{\r\n        width: 600,\r\n        height: 500,\r\n        title: \"任务管理器\",\r\n        icon: join(__dirname, \"../../public/favicon.png\"),\r\n        autoHideMenuBar: true, // 隐藏控制栏\r\n        alwaysOnTop: true, // 窗口置顶\r\n        webPreferences: {\r\n            contextIsolation: false,\r\n            nodeIntegration: true,\r\n            // preload: join(__dirname, '../preload/index.cjs')\r\n        },\r\n    },(electronProcess)=>{\r\n        // 只能注册一次性的ipc\r\n    });\r\n}\r\n\r\nexport {createTaskManager}","import {join} from \"path\";\r\nimport {TaskManager} from \"@/processManage\";\r\nimport {ipcMain} from \"electron\";\r\n\r\nexport function createWindow(taskManager: TaskManager) {\r\n    taskManager.createElectronProcess(\"main\", \"/\",{\r\n        width: 1055,\r\n        height: 710,\r\n        icon: join(__dirname, \"../../public/favicon.png\"),\r\n        frame: false, // 无边框\r\n        // autoHideMenuBar: true, // 隐藏控制栏\r\n        titleBarStyle: \"hidden\", // 隐藏标题栏\r\n        webPreferences: {\r\n            contextIsolation: false,\r\n            nodeIntegration: true,\r\n            webSecurity: true,\r\n            webgl: true,\r\n            preload: join(__dirname, '../preload/index.cjs')\r\n        },\r\n    },()=>{\r\n        ipcMain.once('btn_switch', (event, args) => {\r\n                if (args === \"closeAll\") {\r\n                    taskManager.exitAllTaskProcess();\r\n                }\r\n            },\r\n        );\r\n    });\r\n}","import {TaskManager} from \"@/processManage\";\r\nimport {join} from \"path\";\r\n\r\nfunction createTranslation(taskManager: TaskManager) {\r\n    taskManager.createElectronProcess(\"translation\", \"/translation\",{\r\n        maxWidth: 710,\r\n        minHeight: 440,\r\n        height: 440,\r\n        maxHeight: 700,\r\n        title: \"翻译\",\r\n        icon: join(__dirname, \"../../public/favicon.png\"),\r\n        autoHideMenuBar: true, // 隐藏控制栏\r\n        alwaysOnTop: true, // 窗口置顶\r\n        frame: false, // 隐藏边框\r\n        webPreferences: {\r\n            contextIsolation: false,\r\n            nodeIntegration: true,\r\n            preload: join(__dirname, '../preload/index.cjs')\r\n        },\r\n    },(electronProcess)=>{\r\n        // 只能注册一次性的ipc\r\n    });\r\n}\r\n\r\nexport {createTranslation}","// 自定义协议\r\nimport {Protocol, protocol} from \"electron\";\r\nimport {URL} from \"url\";\r\nimport {readFile} from \"fs\";\r\nimport * as path from 'path'\r\nimport {sendNotification} from \"../appSetup\";\r\n\r\n\r\n// 注册协议\r\nexport function signProtocol() {\r\n    // 注册协议\r\n    protocol.registerSchemesAsPrivileged([\r\n        { scheme: 'app', privileges: { secure: true, standard: true } }\r\n    ])\r\n}\r\n\r\n// 创建协议\r\nexport const createProtocol = (scheme:string, customProtocol?:Protocol) => {\r\n    (customProtocol || protocol).registerBufferProtocol(\r\n        scheme,\r\n        (request, respond) => {\r\n            let pathName = new URL(request.url).pathname\r\n            pathName = decodeURI(pathName) // Needed in case URL contains spaces\r\n            // 后移到asar根目录\r\n            readFile(path.join(__dirname,\"..\", pathName), (error, data) => {\r\n                if (error) {\r\n                    console.error(\r\n                        `Failed to read ${pathName} on ${scheme} protocol`,\r\n                        error\r\n                    )\r\n                    sendNotification({\r\n                        title: 'url',\r\n                        body: `Failed to read ${path.join(__dirname, pathName)} on ${scheme} protocol`,\r\n                    })\r\n                }\r\n                const extension = path.extname(pathName).toLowerCase()\r\n                let mimeType = ''\r\n\r\n                if (extension === '.js') {\r\n                    mimeType = 'text/javascript'\r\n                } else if (extension === '.html') {\r\n                    mimeType = 'text/html'\r\n                } else if (extension === '.css') {\r\n                    mimeType = 'text/css'\r\n                } else if (extension === '.svg' || extension === '.svgz') {\r\n                    mimeType = 'image/svg+xml'\r\n                } else if (extension === '.json') {\r\n                    mimeType = 'application/json'\r\n                } else if (extension === '.wasm') {\r\n                    mimeType = 'application/wasm'\r\n                }\r\n\r\n                respond({ mimeType, data })\r\n            })\r\n        }\r\n    )\r\n}","import { Menu, Tray, shell } from \"electron\";\nimport {sendNotification} from \"../appSetup\";\nimport {TaskManager} from \"@/processManage\";\nimport {join} from \"path\";\n\nfunction createTray(taskManager: TaskManager, tray?: Tray | undefined) {\n  tray = new Tray(join(__dirname, \"../../public/favicon.png\"));\n  const contextMenu = Menu.buildFromTemplate([\n    {\n      label: \"关于项目\",\n      type: \"normal\",\n      click: () => {\n        shell.openExternal(\"https://github.com/DL-NEST\").then((r) => {});\n      },\n    },\n    {\n      label: \"检测更新\",\n      type: \"normal\",\n      click: () => {\n        sendNotification({title: \"检测更新\", body: \"没有更新\"});\n      },\n    },\n    {\n      label: \"Item2\",\n      type: \"separator\",\n      click: () => {},\n    },\n    {\n      label: \"重新加载\",\n      type: \"normal\",\n      click: () => {\n        taskManager.getMainElectron().reload();\n      },\n    },\n    {\n      label: \"退出\",\n      type: \"normal\",\n      click: () => {\n        taskManager.exitAllTaskProcess();\n      },\n    },\n  ]);\n  tray.setToolTip(\"item\\n版本号：0.1.0\\n作者：dl-nest\");\n  tray.setContextMenu(contextMenu);\n  tray.on(\"click\", () => {\n    taskManager.getMainElectron().show();\n  });\n}\n\nexport { createTray };\n","import { Notification ,NotificationConstructorOptions} from \"electron\";\nimport {join} from \"path\";\n\n// 通知栏\ninterface Notify {\n  title: string;\n  message: string;\n}\n\n\n\nfunction sendNotification(options: NotificationConstructorOptions) {\n  new Notification({\n    icon: join(__dirname, \"../../public/favicon.png\"),\n    ...options\n  }).show();\n}\nexport {\n  sendNotification\n}","import {ipcMain, BrowserWindow, shell} from 'electron';\r\nimport {menuLists} from \"../../global\";\r\nimport {TaskManager} from \"@/processManage\";\r\n\r\n\r\nexport function SetupGlobalIpc(taskManager:TaskManager) {\r\n    winCtrlBar();\r\n\r\n    // 数据传送\r\n    ipcMain.on(\"taskManager_get\", (event, arg) => {\r\n        event.sender.send(\"taskManager_get_to\",\r\n            taskManager.getAllProcessStatus())\r\n    })\r\n    // 打开DevTool\r\n    ipcMain.on(\"taskManager_func\", (event, arg) => {\r\n        // console.log(arg.funcName)\r\n        // console.log(arg.processName)\r\n        switch (arg.funcName) {\r\n            case \"DevTool\":\r\n                taskManager.getElectronProcessByName(arg.processName).webContents.openDevTools()\r\n                break;\r\n            case \"IpcLog\":\r\n                // console.log(taskManager.getElectronProcessByName(arg.processName))\r\n                break;\r\n            case \"Show\":\r\n                taskManager.getElectronProcessByName(arg.processName).show()\r\n                break;\r\n            case \"Kill\":\r\n                taskManager.getElectronProcessByName(arg.processName).close()\r\n                break;\r\n        }\r\n    })\r\n    ipcMain.on(\"MainDevTool\", (event, arg) => {\r\n        // 打开DevTool工具\r\n        shell.openPath('chrome.exe').then((r) => {});\r\n    })\r\n\r\n}\r\n\r\nfunction winCtrlBar() {\r\n    ipcMain.on('btn_switch', (event, args) => {\r\n        let win = BrowserWindow.getFocusedWindow();\r\n        if (win) {\r\n            switch (args) {\r\n                case 'minimize':\r\n                    win.minimize();\r\n                    break;\r\n                case 'close':\r\n                    win.close();\r\n                    break;\r\n                case 'maximize':\r\n                    if (win.isMaximized()) {\r\n                        win.unmaximize();\r\n                    } else {\r\n                        win.maximize();\r\n                    }\r\n                    break;\r\n                case 'fix':\r\n                    win.setAlwaysOnTop(!win.isAlwaysOnTop(), 'floating');\r\n                    break;\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nfunction winMenuBar(winPool: BrowserWindow) {\r\n    ipcMain.on('menu_fun', (event, args) => {\r\n        fun(args, winPool);\r\n    })\r\n}\r\n\r\nfunction fun(name:string,winPool: BrowserWindow) {\r\n    menuLists.forEach(itemList => {\r\n        itemList.subList.forEach(item =>{\r\n            item.forEach(it=>{\r\n                if (it.name === name) {\r\n                    if (it.click){\r\n                        it.click(winPool);\r\n                    }\r\n                    return\r\n                }\r\n            })\r\n        })\r\n    })\r\n}\r\n","import {release} from \"os\";\r\nimport {app} from \"electron\";\r\nimport {signProtocol} from \"./protocol\";\r\n\r\nexport function InitAppConf() {\r\n    // 禁用GPU加速 in Windows 7\r\n    if (release().startsWith(\"6.1\")) app.disableHardwareAcceleration();\r\n    // 设置Windows 10+通知的应用程序名称\r\n    if (process.platform === \"win32\") app.setAppUserModelId(app.getName());\r\n    // 电子使安全警告失效\r\n    process.env[\"ELECTRON_DISABLE_SECURITY_WARNINGS\"] = \"true\";\r\n    // 注册协议\r\n    signProtocol()\r\n}\r\n\r\nexport * from './tray';\r\nexport * from './protocol';\r\nexport * from './menu';\r\nexport * from './notification';\r\nexport * from './globalIpc';","import {app, BrowserWindow, BrowserWindowConstructorOptions} from 'electron';\r\nimport {ChildProcess, spawn} from \"child_process\";\r\nimport {createProtocol} from \"@/appSetup\";\r\nimport {processManageType} from \"./type\";\r\n\r\n/*\r\n* 任务进程管理器,用于管理任务进程,并且提供任务进程的启动和关闭功能,以及监听任务进程的退出事件\r\n* Electron 中的进程管理器是一个全局的对象,可以通过这个对象来管理进程,并且可以监听进程的退出事件\r\n* 进程管理器的实例化方式: const {ProcessManager} = require('electron-process-manager');\r\n* 实例化后,可以通过这个实例化对象来创建任务进程,并且可以监听任务进程的退出事件\r\n* 任务进程的创建方式: const taskProcess = new ProcessManager({   任务进程的名称,必须是唯一的\r\n*\r\n* */\r\n\r\n\r\n// 任务管理器的全局对象\r\nclass TaskManager {\r\n    // electron进程\r\n    private electronProcessList: {\r\n        [key: string]: BrowserWindow;\r\n    };\r\n    // 任务进程\r\n    private taskProcessList: {\r\n        [key: string]: ChildProcess;\r\n    };\r\n\r\n    // 初始化变量\r\n    constructor() {\r\n        this.electronProcessList = {};\r\n        this.taskProcessList = {};\r\n    }\r\n\r\n    // 返回任务进程的列表\r\n    public getTaskProcessList(): any {\r\n        return this.taskProcessList   // 返回任务进程列表\r\n    }\r\n\r\n    public getElectronProcessList(): any {\r\n        return this.electronProcessList   // 返回electron进程列表\r\n    }\r\n\r\n    // 返回任务\r\n    public getTaskProcessByName(key: string): any {\r\n        return this.taskProcessList[key]\r\n    }\r\n    public getElectronProcessByName(key: string): BrowserWindow {\r\n        return this.electronProcessList[key]\r\n    }\r\n\r\n    // 退出任务\r\n    public exitTaskProcessByName(key: string): any {\r\n        return this.taskProcessList[key]\r\n    }\r\n    public exitElectronProcessByName(key: string): BrowserWindow {\r\n        return this.electronProcessList[key]\r\n    }\r\n\r\n    public getMainElectron(): BrowserWindow {\r\n        return this.electronProcessList['main']\r\n    }\r\n\r\n    // 退出所有进程\r\n    public exitAllTaskProcess(): void {\r\n        for (let key in this.taskProcessList) {\r\n            this.taskProcessList[key].kill();\r\n        }\r\n        for (let key in this.electronProcessList) {\r\n            this.electronProcessList[key].close();\r\n        }\r\n    }\r\n\r\n    // 返回所有进程的状态参数\r\n    public getAllProcessStatus(): processManageType[] {\r\n        let processList: processManageType[] = [];\r\n        for (let key in this.taskProcessList) {\r\n            processList.push({\r\n                name: key,\r\n                cpu: 2,\r\n                mark: 'task',\r\n                memory: 3,\r\n                pid: this.taskProcessList[key].pid,\r\n                status: this.taskProcessList[key].connected\r\n            });\r\n        }\r\n        for (let key in this.electronProcessList) {\r\n            processList.push({\r\n                name: key,\r\n                cpu: 2,\r\n                mark: 'electron',\r\n                memory: 3,\r\n                pid: this.electronProcessList[key].id,\r\n                status: this.electronProcessList[key].isDestroyed()\r\n            })\r\n        }\r\n        return processList;\r\n    }\r\n\r\n    // electron进程创建方法\r\n    public createElectronProcess(name: string, routerPath: string, args: BrowserWindowConstructorOptions, onceIpc: (electronProcess: BrowserWindow) => any): void {\r\n        if (this.electronProcessList[name]) {\r\n            return;\r\n        }\r\n        // 创建electron进程\r\n        const electronProcess = new BrowserWindow({\r\n            // 在创建的时候不显示窗口\r\n            show: false,\r\n            ...args,\r\n        });\r\n        createProtocol('app');\r\n        // 加载electron进程\r\n        if (app.isPackaged) {\r\n            electronProcess.loadURL(`app://../render/index.html#${routerPath}`).then((r) => {\r\n            });\r\n        } else {\r\n            electronProcess.loadURL(`http://localhost:3000/#${routerPath}`).then((r) => {\r\n            });\r\n        }\r\n        // 将electron进程加入到electron进程列表中\r\n        this.electronProcessList[name] = electronProcess;\r\n        // 添加electron进程的退出事件\r\n        electronProcess.on('close', (event) => {\r\n            console.log(`${name} -- close`);\r\n            // 删除electron进程\r\n            delete this.electronProcessList[name];\r\n        });\r\n        // 窗口准备完毕后执行\r\n        electronProcess.on('ready-to-show', () => {\r\n            electronProcess.show();\r\n        });\r\n        // electron的ipc事件列表\r\n        onceIpc(electronProcess);\r\n    }\r\n    // 任务的创建\r\n    public createTaskProcess(taskName: string, taskPath: string, taskArgument: string[]): void {\r\n        if (this.taskProcessList[taskName]) {\r\n            return;\r\n        }\r\n        // 创建任务进程\r\n        this.taskProcessList[taskName] = spawn(taskPath, taskArgument);\r\n        // 监听任务进程的退出事件\r\n        this.taskProcessList[taskName].on('exit', (code) => {\r\n            console.log(`任务进程 ${taskName} 退出,退出码为: ${code}`);\r\n            // 删除任务进程\r\n            delete this.taskProcessList[taskName];\r\n        });\r\n    }\r\n}\r\n\r\nexport {TaskManager};","import {app, BrowserWindow, Tray,globalShortcut,session} from \"electron\";\nimport {createTaskManager, createTranslation, createWindow} from \"./windows\";\nimport {TaskManager} from \"./processManage\";\nimport {InitAppConf, createTray, SetupGlobalIpc} from \"./appSetup\";\nimport * as os from \"os\";\nimport * as path from \"path\";\n\n\n// 窗口的管理\nlet taskManager = new TaskManager()\nlet tray:Tray | undefined = undefined\n\n\n// 初始化app配置\nInitAppConf()\n// app准备完成\napp.whenReady().then(async () => {\n  console.log(app.getPath(\"userData\"))\n  console.log(app.getPath(\"home\"))\n  session.defaultSession.loadExtension('I:\\\\porject\\\\vueDevTool').then(() => {\n    console.log('load Vue devtools success')\n  })\n  // 创建主窗口\n  await createWindow(taskManager);\n  // 全局快捷键\n  SetupShortcut(taskManager);\n  // ipc事件\n  SetupGlobalIpc(taskManager)\n  // 注册托盘\n  createTray(taskManager,tray);\n  // 注册菜单\n  // SignMenu(winPool);\n});\n\n// app活动\napp.on(\"activate\", () => {\n  if (BrowserWindow.getAllWindows().length === 0) {\n    createWindow(taskManager);\n  }\n});\n\n// app 准备好了\napp.on(\"ready\", () => {\n\n});\n\n// app 关闭\napp.on(\"window-all-closed\", () => {\n  if (process.platform !== \"darwin\") {\n    app.quit();\n  }\n});\n\n\n// app准备退出的时候\napp.on('will-quit', () => {\n  console.log('will quit')\n  globalShortcut.unregisterAll()\n  if (tray) {\n    tray.destroy()\n  }\n})\n\nfunction SetupShortcut(taskManager: TaskManager) {\n  // 检测是否已经注册过快捷键\n  if (globalShortcut.isRegistered(\"Alt+q\")) {\n    console.log(\"have registered\")\n  }\n  let winMain = taskManager.getMainElectron()\n  globalShortcut.register(\"Alt+q\", () => {\n    if (winMain.isFocused()) {\n      winMain.minimize();\n      winMain.reload();\n    } else {\n      winMain.focus();\n    }\n  })\n  // 打开开发者调试工具\n  globalShortcut.register(\"Alt+w\", () => {\n    if (winMain.webContents.isDevToolsOpened()) {\n      winMain.webContents.closeDevTools();\n    } else {\n      winMain.webContents.openDevTools({ mode: \"undocked\" });\n    }\n  });\n  // 打开任务管理器\n  globalShortcut.register(\"Alt+e\", () => {\n    createTaskManager(taskManager);\n  });\n  // 打开翻译\n  // 打开任务管理器\n  globalShortcut.register(\"Alt+x\", () => {\n    if (taskManager.getElectronProcessByName(\"translation\")) {\n      if (taskManager.getElectronProcessByName(\"translation\").isFocused()){\n        taskManager.getElectronProcessByName(\"translation\").hide();\n      }else {\n        taskManager.getElectronProcessByName(\"translation\").show();\n      }\n    }else{\n      createTranslation(taskManager);\n    }\n  });\n\n  globalShortcut.register(\"Alt+d\", () => {\n    console.log('Alt+b')\n    taskManager.getElectronProcessByName('main').webContents.send('rollbackInNav',\"webview\")\n  });\n\n}"],"names":["join","ipcMain","protocol","URL","readFile","path","Tray","Menu","shell","Notification","BrowserWindow","release","app","spawn","session","globalShortcut"],"mappings":"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"}